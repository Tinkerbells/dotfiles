#!/usr/bin/env python3

import subprocess
import time
import sys
import signal
import os
import json

# Timer durations (in minutes)
WORK_TIME = 45
SHORT_BREAK_TIME = 5
LONG_BREAK_TIME = 25
NUM_CYCLES = 4

# File path for cache
CACHE_FILE = "/tmp/pomodoro.json"


def load_cache():
    try:
        with open(CACHE_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            "current_state": "work",
            "work": WORK_TIME * 60,
            "short_break": SHORT_BREAK_TIME * 60,
            "long_break": LONG_BREAK_TIME * 60,
        }


def save_cache(cache):
    with open(CACHE_FILE, "w") as f:
        json.dump(cache, f)


def clean_cache():
    os.remove(CACHE_FILE)


def pomodoro_timer(message, timer_name):
    cache["current_state"] = timer_name
    remaining_time = cache[timer_name]
    subprocess.run(
        f"notify-send -a Pomodoro -t 1000 -r 786 -i pomodoro Pomodoro '{message}'",
        shell=True,
    )
    while remaining_time > 0:
        print("\r" + f"{remaining_time // 60}m {remaining_time % 60}s")
        time.sleep(1)
        remaining_time -= 1
        # Update cache
        cache[timer_name] = remaining_time
        save_cache(cache)


cache = load_cache()

if "-f" in sys.argv:
    clean_cache()


def stop_pomodoro():
    subprocess.run(
        "notify-send -a Pomodoro -t 1000 -r 786 -i pomodoro Pomodoro 'Stop timer! üõë'",
        shell=True,
    )
    sys.exit()


def run_pomodoro_cycle(num_cycles):
    for _ in range(num_cycles):
        # Work time
        pomodoro_timer("Work time! üöÄ", "work")

        # Short break
        pomodoro_timer("Short break! ‚òïÔ∏è", "short_break")

        # Check if it's time for a long break
        if (_ + 1) % 4 == 0:
            pomodoro_timer("Long break! üå¥", "long_break")


def signal_handler(sig, frame):
    stop_pomodoro()


signal.signal(signal.SIGTERM, signal_handler)

if __name__ == "__main__":
    run_pomodoro_cycle(NUM_CYCLES)
